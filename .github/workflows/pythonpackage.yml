name: PyMOL PDB Plugin CI Tests
# Originally based on pythonpackage.

on: [push, pull_request]

jobs:
  test-runs:
    name: Test Runs
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        # Bracket testing with the oldest and newest 'official' versions.
        # The '.nopy" extension means there is no explicit python version
        # in the package URL.
        pymol-version: [2.0.7_1, 2.3.4_121]
        # Lint with the same Python versions that PyMOL is distributed with.
        python-version: [2.7, 3.7]
        exclude:
          # Old PyMOL didn't use python3, so no point testing it.
          - pymol-version: 2.0.7_1
            python-version: 3.7
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1  # no history, just HEAD

    #----- linting steps -----
    - name: Set up Python ${{matrix.python-version}}
      uses: actions/setup-python@v1
      with:
        python-version: ${{matrix.python-version}}
    - name: Install dependencies
      run: |
        # python -m pip install --upgrade pip
        # pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names.
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings.
        # Flake8 config is checked into repository and read from there.
        flake8 . --count --exit-zero --statistics

    #----- pytest steps -----
    - name: Get PyMOL Package Name
      id: pymol_name
      run: |
        # PyMOL includes a Python environment which we'll use for testing.
        if [[ "${{matrix.pymol-version}}" < '2.3' ]]; then
          py_version=''
        else
          # Recent PyMOL package names include explicit Python version, old
          # ones don't.
          py_version="-py$(echo ${{matrix.python-version}} | tr -d .)"
        fi
        url="https://pymol.org/installers/PyMOL-${{matrix.pymol-version}}-Linux-x86_64${py_version}.tar.bz2"
        short_name="pymol-${{matrix.pymol-version}}${py_version}"
        # Pass output to later steps (in steps.pymol_name.outputs.<name>).
        echo "##[set-output name=url;]${url}"
        echo "##[set-output name=short_name;]${short_name}"
    - name: Cache PyMol Package
      uses: actions/cache@v1
      with:
        path: pymol
        # Use date as a cache token so we can invalidate it when necessary.
        key: ${{steps.pymol_name.outputs.short_name}}-20191205
    - name: Install PyMOL Package
      run: |
        if [[ -d 'pymol' ]]; then
          echo 'CI cache hit: Using PyMOL package from cache.'
        else
          # Now download: Note that this can take a while at times.
          TIMEFORMAT='%1lR elapsed time'
          set -x
          time curl -o 'pymol.tar.bz2' '${{steps.pymol_name.outputs.url}}'
          time tar xjf 'pymol.tar.bz2'
          set +x
        fi
        # Old PyMOL packages are not hermetic. Install missing libraries. Since
        # this install modifies host's system directories we need to repeat it
        # every time even if the pymol package was cached.
        if [[ "$(echo ${{matrix.pymol-version}} | cut -c 1-3)" == '2.0' ]]; then
          sudo apt-get install -y libglu1-mesa
        fi
    - name: Test with pytest
      run: |
        # Install pytest into pymol's Python environment.
        pymol/bin/pip install --upgrade pip
        pymol/bin/pip install \
          pytest \
          pytest-cov \
          requests \
          requests-mock
        # To get the correct PYTHONPATH module search path to PDB_plugin.py,
        # start pytest via python -m instead of directly.
        pymol/bin/python -m pytest \
          --cov=. \
          --cov-branch \
          --cov-report html:test_coverage/html \
          --cov-report annotate:test_coverage/annotation \
          --cov-report term \
          --durations=10 \
          -v
        mv .coverage test_coverage  # for combining later
    - name: Upload code coverage results
      uses: actions/upload-artifact@v1
      with:
        name: coverage-${{steps.pymol_name.outputs.short_name}}
        path: test_coverage

  combine-coverage:
    name: Combine Coverage
    needs: test-runs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1  # no history, just HEAD
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        # Python3.8 computes coverage lines differently from <=3.7, leading to
        # 'def' lines after function decorators being reported as uncovered.
        # See https://github.com/nedbat/coveragepy/issues/866.
        # Thus we have to stick to v3.7 for coverage combine and its reporting.
        python-version: 3.7
    - name: Install dependencies
      run: |
        # python -m pip install --upgrade pip
        pip install \
          coverage \
          'coveralls>=1.9.2'

    # Having to unroll the cross product of the test-run job matrix here in
    # order to import their coverage files is cumbersome, but there does not
    # seem to be any sort of glob syntax for artifact download.
    - name: Download coverage-pymol-2.3.4_121-py37
      uses: actions/download-artifact@v1
      with:
        name: coverage-pymol-2.3.4_121-py37
    - name: Download coverage-pymol-2.3.4_121-py27
      uses: actions/download-artifact@v1
      with:
        name: coverage-pymol-2.3.4_121-py27
    - name: Download coverage-pymol-2.0.7_1
      uses: actions/download-artifact@v1
      with:
        name: coverage-pymol-2.0.7_1
    - name: Combine coverage across test matrix
      run: |
        coverage combine coverage-*/.coverage
        coverage html -d test_coverage/html
        coverage annotate -d test_coverage/annotation
        coverage report
        cp .coverage test_coverage
    - name: Upload combined code coverage results
      uses: actions/upload-artifact@v1
      with:
        name: coverage-combined
        path: test_coverage
    - name: Send combined coverage results to coveralls.io
      env:
        COVERALLS_REPO_TOKEN: ${{secrets.COVERALLS_REPO_TOKEN}}
      run: |
        coveralls
